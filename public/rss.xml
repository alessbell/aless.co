<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Alessia Bellisario</title>
        <link>localhost:3000</link>
        <description>undefined</description>
        <lastBuildDate>Sat, 21 Jan 2023 17:31:52 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Alessia Bellisario</title>
            <url>localhost:3000/favicon.ico</url>
            <link>localhost:3000</link>
        </image>
        <copyright>All rights reserved 2023</copyright>
        <item>
            <title><![CDATA[Release Automation in @apollo/client]]></title>
            <link>localhost:3000/automatic-release-management</link>
            <guid>localhost:3000/automatic-release-management</guid>
            <pubDate>Sat, 21 Jan 2023 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This post is about the steps I took to automate <code>@apollo/client</code>&#x27;s release process; hopefully it will save someone else a few minutes in the future who may be considering a similar workflow :)</p>
<h2 id="changesets"><a class="anchor" href="#changesets"><span class="icon icon-link"></span></a>Changesets</h2>
<p>After looking at a few alternatives, <a href="https://github.com/changesets/changesets">Changesets</a> was clearly the library that would allow our team building <code>@apollo/client</code> to adapt our existing manual workflow in the most seamless way.</p>
<p>It has an API for prereleases involving long-running integration branches we&#x27;ll explore later on, allows changelog entries to be authored (and <em>edited</em>) in markdown which are written at the time the relevant code is committed, and gives maintainers the right granularity of control over the way changesets are batched.</p>
<p>IMO, the prerelease workflow is the more interesting of the two to discuss since its API is still somewhat in development, so let&#x27;s take a look at the release workflow first.</p>
<h2 id="releases"><a class="anchor" href="#releases"><span class="icon icon-link"></span></a>Releases</h2>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[2022]]></title>
            <link>localhost:3000/2022</link>
            <guid>localhost:3000/2022</guid>
            <pubDate>Mon, 12 Dec 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>Slow comes the hour, its passing speed how great!</p>
</blockquote>
<p>Hello again! I can hardly believe I&#x27;m back at my laptop typing up another Year in Review post! Let&#x27;s go üèÉ‚Äç‚ôÄÔ∏è</p>
<h2 id="2022-was-a-year-of"><a class="anchor" href="#2022-was-a-year-of"><span class="icon icon-link"></span></a>2022 was a year of:</h2>
<ul>
<li>two sweet babies born to friends and family (Adriano and Vivian üíõüíú)</li>
<li>one lemon-and-soccer-themed 1st birthday for Baby O ‚öΩÔ∏è</li>
<li>one 60th birthday celebration ft. pizza, sushi and my amazing mom, Erica</li>
<li>one 60th birthday bash that involved a surprising (or unsurprising, if you know my dad) number of cartwheels: HBD &quot;G Money&quot; aka my uncle Gino</li>
<li>one 70th birthday beach weekend for the books celebrating my father-in-law, John</li>
<li>four beautiful weddings in Boston, Muskoka, Salt Lake City and the Bahamas (V√©ro &amp; Geoff, Karyn &amp; Cam, James &amp; Germaine and Andrew &amp; Naz üéâ)</li>
</ul>
<p>At the close of 2021, Baby O was just four and a half months old and Carla and I were still getting our sea legs as parents. Through the warm glow of the first few months, we couldn&#x27;t have been happier to be new moms to someone we already sensed was a very happy, goofy and <strong><em>energetic</em></strong> kid.</p>
<h2 id="hello-manhattan"><a class="anchor" href="#hello-manhattan"><span class="icon icon-link"></span></a>Hello, Manhattan</h2>
<p>We started off the year in Brooklyn, but not for long. After 15 and 5 years respectively, Carla and I decided it was time to try out a new borough; midway through January we moved to Manhattan Valley on the Upper West Side. We&#x27;ve loved our first year here: everything we need is within a couple block radius of our apartment, we&#x27;re closer to Carla&#x27;s family and, crucially, our pediatrician&#x27;s office is right downstairs.</p>
<h2 id="by-the-power-vested-in-me-by-the-commonwealth-of-massachusetts"><a class="anchor" href="#by-the-power-vested-in-me-by-the-commonwealth-of-massachusetts"><span class="icon icon-link"></span></a>By the power vested in me by the Commonwealth of Massachusetts</h2>
<p>In February, I officiated the wedding of two of my best friends in Boston, V√©ronique and Geoff. I was <em>very</em> happily surprised by how simple it was to tick the bureaucratic boxes required to legally perform a wedding in Massachussetts‚Äîif you must wed a couple in the U.S., see if they&#x27;ll tie the knot in the Baked Bean state.</p>
<img alt="A scanned photograph from V√©ro and Geoff&#x27;s wedding ceremony, with me officiating" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fvero.98d59ec8.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fvero.98d59ec8.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fvero.98d59ec8.jpg&amp;w=3840&amp;q=75" width="1644" height="1191" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Baby O took his first road trip with Carla, my mother-in-law, Mary, and me as we made the four hour drive. I was more nervous than I thought I&#x27;d be (will my retelling of their love story do it justice? is the tone just right?), but the couple made it easy. Their vows were 1 of 1 (x2), as expected, and the wedding speeches delivered by beaming parents landed differently than in the past, each recounting tender stories of awkward adolescences or less than convincing threats of running away from home. It was our first real outing in ages and the whole thing ******* rocked.</p>
<img alt="Carla and Alessia as guests at V√©ro and Geoff&#x27;s wedding, smiling beside the dance floor and flashing the peace sign" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fmoms.75881053.jpg&amp;w=2048&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fmoms.75881053.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fmoms.75881053.jpg&amp;w=3840&amp;q=75" width="2016" height="1512" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="meeting-the-family"><a class="anchor" href="#meeting-the-family"><span class="icon icon-link"></span></a>Meeting the family</h2>
<p>The spring brought some highs (<a href="https://apollographql.com">new job</a> for A and Carla&#x27;s law firm back in full swing post-maternity leave) and lows (COVID for A), but the summer made up for it. For ten days in June and July, Carla, Baby O and I descended on the Bay Area to visit close friends of mine: Robin is a <a href="https://ucberkeley.academia.edu/RobinBuller">brilliant historian</a> who makes a mean martini and <a href="https://www.robinbceramics.com/">gorgeous pottery and ceramics</a>; Mark, Robin&#x27;s husband, is a skilled gardener who tends cells in his day job genetically engineering sustainable and delicious <a href="https://upsidefoods.com/">lab-grown meat</a>.</p>
<img alt="Carla, Mark and Robin sitting outside in Oakland, California around a table" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FrobinAndMark.81d64ccb.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FrobinAndMark.81d64ccb.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FrobinAndMark.81d64ccb.jpg&amp;w=3840&amp;q=75" width="1344" height="1008" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>But there was another important reason we took our 10 month old on his first cross-country plane ride: to meet some of his siblings for the first time üíñ Carla and I have come to understand the importance of bio kin on Baby O&#x27;s dad&#x27;s side from listening to the perspectives of adult donor conceived people (DCP).</p>
<p>While some use the term &quot;diblings&quot; (portmanteau of &quot;donor siblings&quot;) to describe these sibling relationships, we&#x27;ve realized the term can downplay the connection our son has with the people who share 50% of his DNA. After all, lots of non-DCP kids grow up knowing their biological half siblings, and no one corrects them when they refer to them without qualification.</p>
<img alt="Alessia, Carla and Orlando hiking in the Oakland hills" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffamily.95f3ee40.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffamily.95f3ee40.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ffamily.95f3ee40.jpg&amp;w=2048&amp;q=75" width="1004" height="1004" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Meeting some of his siblings and their families and spending time with them throughout our visit was an incredible experience: the kids are all happy and outgoing, and while they&#x27;re being raised in different households, it was stirring to observe the traits they share even at a young age. When the youngest sibling present began to cry, every parent in the room perked up. It sounded remarkably like each of our kids.</p>
<p>A huge added bonus for Carla and me was getting to know the parents. I&#x27;ve heard the term &quot;cross-mom&quot; used by DCP to refer to your sibling&#x27;s mom, for example. Well, Baby O has lots of cross-moms and non-binary cross-parents! We&#x27;re biased, but it&#x27;s a <em>super</em> cool group of kids and parents, to a person. We&#x27;re grateful for Baby O&#x27;s, and by extension, our family, of all three branches of his family tree.</p>
<h2 id="leo-szn"><a class="anchor" href="#leo-szn"><span class="icon icon-link"></span></a>Leo szn</h2>
<p>August was another highlight: we celebrated Baby O&#x27;s first birthday back in NYC and again in Toronto followed by a weeklong Montreal trip. As a former coworker told me during the coldest February in recorded history soon after I&#x27;d moved there: don&#x27;t worry, the summers are <em>magical</em>. Can confirm.</p>
<img alt="Orlando and Carla taking a walk through Montreal&#x27;s Parc Lahaie and chatting with a man feeding some birds" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbirds.e8a075bb.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbirds.e8a075bb.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbirds.e8a075bb.jpg&amp;w=3840&amp;q=75" width="1344" height="1008" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Heading into the end of the year, we&#x27;re feeling so fortunate to be able to spend time with loved ones and marvel at how far our little family has come in the last 12 months. Sending you love and warmth this holiday season, reader, wherever you may be. üíå</p>
<p>-Alessia</p>

<img alt="Our cat, Ghost, laying cozily on a couch in a nest of pillows" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fghost.311415b8.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fghost.311415b8.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fghost.311415b8.jpg&amp;w=2048&amp;q=75" width="1008" height="1006" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Joining Apollo GraphQL]]></title>
            <link>localhost:3000/joining-apollo</link>
            <guid>localhost:3000/joining-apollo</guid>
            <pubDate>Tue, 21 Jun 2022 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;m happy to share that I&#x27;m joining <a href="http://apollographql.com">Apollo GraphQL</a> as a Senior Open Source Engineer working on the Apollo Client team, beginning today üéâ</p>
<img alt="The Apollo GraphQL, GraphQL and React logos interspersed with addition symbols" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapollo-header.933772ed.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapollo-header.933772ed.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fapollo-header.933772ed.jpg&amp;w=2048&amp;q=75" width="1000" height="420" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p><a href="https://github.com/apollographql/apollo-client"><code>@apollo/client</code></a> is the most widely used GraphQL client library on the web: thousands of engineers building high performance web apps rely on it to cache and manage data fetched from GraphQL APIs.</p>
<p>The team is incredibly talented and kind. This will be my first full-time role working in OSS, and the chance to collaborate with veteran open source leaders like <a href="https://github.com/hwillson">hwillson</a> and <a href="https://github.com/benjamn">benjamn</a> is an opportunity I couldn&#x27;t pass up. I&#x27;m so excited to get started.</p>
<blockquote>
<p>My team is hiring! If this work sounds interesting to you, here&#x27;s a more detailed <a href="https://www.apollographql.com/careers/job/?id=7d052c8f-5034-4bfb-b04a-1e195b28827f&amp;utm_campaign=2022-06-13_senior-software-engineer-open-source&amp;utm_source=linkedin&amp;utm_medium=social">job description</a>. Feel free to get in touch.</p>
</blockquote>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[2021]]></title>
            <link>localhost:3000/2021</link>
            <guid>localhost:3000/2021</guid>
            <pubDate>Fri, 31 Dec 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2021 was a year of seven beautiful babies born to friends and family, including the first addition to the Sandersario family (portmanteau for IRL/URL friends, not legal documents), Baby O, and one outdoor wedding (congrats Monica &amp; Mike!)</p>
<img alt="Photograph of an ultrasound scan" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbabyOScan.d2c400c4.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbabyOScan.d2c400c4.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbabyOScan.d2c400c4.jpg&amp;w=2048&amp;q=75" width="1000" height="1000" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>The year began with much less fanfare than 2020, but with an undercurrent of anticipation for the newest family member already well on their way.</p>
<p>Ghost, our formerly-outdoor-but-now-solidly-indoor cat kept us entertained through the darkest hours of the winter as Carla slept more than usual and I kept myself occupied making <a href="https://www.kingarthurbaking.com/recipes/king-arthurs-detroit-style-pizza-recipe">Detroit-style pizzas from scratch</a>. I turned 30 and my sister-in-law helped me realize my dream of one day owning a pasta maker.</p>
<img alt="Winter 2021: a glutenous haze" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Floaves.b4626914.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Floaves.b4626914.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Floaves.b4626914.jpg&amp;w=2048&amp;q=75" width="1000" height="1334" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Countless loaves of quarantine bread were baked and consumed, and in March we had the joy of becoming aunts for the first time to Dana &amp; Jon&#x27;s delightful Baby A.</p>
<h2 id="15-minutes-of-canadian-infamy"><a class="anchor" href="#15-minutes-of-canadian-infamy"><span class="icon icon-link"></span></a>15 minutes of Canadian infamy</h2>
<p>In April, after gratefully receiving both vaccine doses, Carla and I decided to pay my family in Toronto a visit. The quarantine hotel requirement for international air travelers was in effect so we thought we&#x27;d walk across the Rainbow Bridge at Niagara Falls instead...</p>
<img alt="Carla and I at Niagara Falls moments before Carla&#x27;s Canadian television debut" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FniagaraFalls.4136a731.jpg&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FniagaraFalls.4136a731.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FniagaraFalls.4136a731.jpg&amp;w=3840&amp;q=75" width="1200" height="900" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Our travel day went almost exactly according to plan save for the CTV reporter who rushed us on the Canadian side. I dodged him, but Carla proudly told him and his camera exactly why we&#x27;d crossed the border on foot. <a href="https://toronto.ctvnews.ca/ontarians-skipping-hotel-quarantine-program-by-walking-across-canada-u-s-border-1.5400275">Her clip made the 6 o&#x27;clock news</a> and we even received a few calls for our arrest via Twitter, this being 2021.</p>
<p>The rest of the spring/summer sped by: a couple of short visits to Rhode Island, Buffalo and Shelter Island, one baby shower in Prospect Park and a NYC Dyke March to remember (Carla was one of the most popular marchers with her crop top and, by then, massively pregnant belly.)</p>
<img alt="A photo of the crowd at the 2021 NYC Dyke March" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdykeMarchNYC.17723063.jpg&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdykeMarchNYC.17723063.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FdykeMarchNYC.17723063.jpg&amp;w=3840&amp;q=75" width="1200" height="1600" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="here-he-comes"><a class="anchor" href="#here-he-comes"><span class="icon icon-link"></span></a>Here he comes</h2>
<p>We were sitting (emphasis on <em>sitting</em>) on the N train when Carla&#x27;s water broke as we pulled into the 39th Ave. station in Queens, what the labour and delivery nurse later called Baby O&#x27;s &quot;New York baptism.&quot; We hopped off and frantically called Carla&#x27;s doctor who advised us to calmly head home (yeah right), grab our bag and proceed to the hospital.</p>
<p>It was an otherwise quiet Saturday afternoon when we finally arrived at the delivery ward. Veronika, the nurse on shift when we were first admitted, assured us Carla would probably still be waiting for active labour to begin when she came back on shift ~24H later. Baby O had other plans: the next morning at 7:24am he was in our arms.</p>
<img alt="A photo of a newborn&#x27;s foot" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbabyFoot.f152a593.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbabyFoot.f152a593.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbabyFoot.f152a593.jpg&amp;w=3840&amp;q=75" width="1080" height="1616" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>In the middle of the delivery (!) one of the nurses noticed my OCAD sweatpants and exclaimed &quot;Canadians?!&quot; to my utter bewilderment. And in the seconds after Baby O&#x27;s birth, another nurse grabbed my phone and snapped what are now the most precious photos I possess. I&#x27;ve heard other parents describe the bond that is formed with the people who help bring your child into the world, but I couldn&#x27;t stop marveling at the level of care we received. We are forever indebted to the team at NYU Langone.</p>
<h2 id="learning-to-parent-in-a-pandemic"><a class="anchor" href="#learning-to-parent-in-a-pandemic"><span class="icon icon-link"></span></a>Learning to parent in a pandemic</h2>
<p>The late summer/fall was a glorious jumble of diapers, long walks and discovering exactly what hour of the early morning my favorite podcasts drop while savouring my half of the night shift.</p>
<p>Despite the fully vaxxed summer in effect in NYC, having a newborn in many ways felt like being transported to day 0 of lockdown: fewer MTA trips, more walking and park hangs.</p>
<img alt="Baby O visits Bay Ridge" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbayRidgeStroll.88abfa1b.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbayRidgeStroll.88abfa1b.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbayRidgeStroll.88abfa1b.jpg&amp;w=2048&amp;q=75" width="1000" height="1333" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>To end the year, we traveled to Toronto for Christmas and introduced the kid to one of the three branches of his family tree to everyone&#x27;s delight. We cut our trip short due to Omicron, but we&#x27;re so thankful for the time we had.</p>
<img alt="My dad, Santino, holding Baby O, both appearing to be asleep by a Christmas tree (though my dad is just pretending)" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fxmas.0840faa4.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fxmas.0840faa4.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fxmas.0840faa4.jpg&amp;w=3840&amp;q=75" width="1300" height="1733" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Thanks for reading! Wishing you a very happy holidays and a wonderful 2022 :^)</p>
<p>- Alessia</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[2020]]></title>
            <link>localhost:3000/2020</link>
            <guid>localhost:3000/2020</guid>
            <pubDate>Fri, 11 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2020 was a year of three weddings (including my own, to <a href="https://twitter.com/csandersonlaw">Carla</a> - congrats Dana &amp; Jon and Lauren &amp; Sean!), two funerals, one apartment fire and a global pandemic. It was also the last year of my twenties: looking at pictures from January, it&#x27;s almost hard to recognize the person who began the year waltzing around in my clothing.</p>
<h2 id="january"><a class="anchor" href="#january"><span class="icon icon-link"></span></a>January</h2>
<p>After a trip to <a href="https://www.warehousewinesandspirits.com/">Warehouse Wines &amp; Spirits</a> at 8th and Broadway (for drinkable champagne in vast quantities), Carla and I hosted a NYE party with friends in Brooklyn. The next morning, we exchanged the rings we&#x27;d both been not-so-secretly harboring and got engaged.</p>
<img alt="Mimosas for breakfast" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FengagementAlessAndCarla.d6d6a8b2.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FengagementAlessAndCarla.d6d6a8b2.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FengagementAlessAndCarla.d6d6a8b2.jpg&amp;w=2048&amp;q=75" width="1000" height="1123" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>We were excited to tell our families, but first we had a trip lined up: after reaching a five year work anniversary, I was eligible for a four week sabbatical. On January 16, we headed to JFK en route to Tokyo via Beijing.</p>
<h3 id="beijing"><a class="anchor" href="#beijing"><span class="icon icon-link"></span></a>Beijing</h3>
<p>We were flying via Beijing both ways and had ambitious plans for our two 24hr layovers.</p>
<img alt="Whenever I find an Alice Munro translation I take a picture for my dad, Alice Munro&#x27;s #1 superfan" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbeijing.2e63c28a.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbeijing.2e63c28a.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbeijing.2e63c28a.jpg&amp;w=3840&amp;q=75" width="1616" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>We landed the evening of the 17th, obtained our temporary tourist visas and headed to our hotel. Initially, we thought we&#x27;d hop on a bus to the Great Wall, but this was the shorter of our two layovers and the jet lag was already hitting us. We figured we&#x27;d save that day trip for the way home...</p>
<h3 id="tokyo"><a class="anchor" href="#tokyo"><span class="icon icon-link"></span></a>Tokyo</h3>
<img alt="The place in downtown Tokyo where Carla and I were stopped by college students who interviewed us for their YouTube channel" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanSteps.d4c4cc94.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanSteps.d4c4cc94.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanSteps.d4c4cc94.jpg&amp;w=3840&amp;q=75" width="1616" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>We arrived in Tokyo on my 29th birthday the following day, tired and vibrating with excitement. Carla&#x27;s cousin Joseph has lived in the city for the last seven years and graciously serves as tour guide/karaoke buddy for family traveling through Japan.</p>
<p>He is now also one of just a handful of people who have witnessed my rendition of <a href="https://www.youtube.com/watch?v=AzaTyxMduH4"><em>Pour que tu m&#x27;aimes encore</em></a> -- I was pleased to find the largest catalog of Celine Dion&#x27;s French music I&#x27;ve seen outside of Qu√©bec.</p>
<img alt="Lunch ft. a nod to the best Mexican restaurant in SLC, Red Iguana" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanLunch.d359ab40.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanLunch.d359ab40.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanLunch.d359ab40.jpg&amp;w=3840&amp;q=75" width="1616" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>I won&#x27;t attempt to recap our whole trip: we bought Japan Rail passes and got to experience the unmatched convenience + punctuality of the Shinkansen while visiting Kyoto, Hiroshima, Hakone, Niseko, Sapporo and more over the course of two weeks. We met so many friendly people along the way, narrowly making it back via Hawai&#x27;i as the US borders closed to non-citizens who had visited China in the previous two weeks: on our date of re-entry, our initial Beijing layover was 16 days prior.</p>
<img alt="Entering this small restaurant in Kyoto felt like walking into a friend&#x27;s living room, the regulars greeting us with beers" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanFriends.b3720ef1.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanFriends.b3720ef1.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanFriends.b3720ef1.jpg&amp;w=3840&amp;q=75" width="1500" height="1125" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>We didn&#x27;t get to see the Great Wall, but we had two days in Honolulu we weren&#x27;t planning for -- two rather than one due to a time zone mix-up. Best mistake ever!</p>
<img alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fhawaii.bfa64d0f.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fhawaii.bfa64d0f.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fhawaii.bfa64d0f.jpg&amp;w=3840&amp;q=75" width="1080" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>In February, I squeezed in a trip to SF, a conference (the first ever WebAssembly Summit!) and managed to visit both family and friends back home in Toronto, celebrating a close friend&#x27;s impending nuptials at her bachelorette in Prince Edward County. 2020 was off to a <em>strong</em> start.</p>
<img alt="Vow to RAYge" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FprinceEdwardCounty.6cc39ef7.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FprinceEdwardCounty.6cc39ef7.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FprinceEdwardCounty.6cc39ef7.jpg&amp;w=3840&amp;q=75" width="1616" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="new-job-a-fire-and-a-wedding"><a class="anchor" href="#new-job-a-fire-and-a-wedding"><span class="icon icon-link"></span></a>New job, a fire and a wedding</h2>
<p>The first few terrifying weeks of lockdown in NYC began mid-March, followed by an apartment fire at the end of May which started in our next door neighbour&#x27;s yard and woke us to an apartment filled with thick smoke.</p>
<img alt="Silver lining: we met more of our neighbours than we ever had on the sidewalk at 2am" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FapartmentFire.0de7d0c9.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FapartmentFire.0de7d0c9.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FapartmentFire.0de7d0c9.jpg&amp;w=2048&amp;q=75" width="1000" height="1333" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Everyone made it out unscathed, thankfully. The fire came just two weeks after I started a new job which added to the stress of being uprooted -- all told we were out of our apartment for four months. I&#x27;m extremely grateful for the support my team gave me in the weeks that followed.</p>
<h3 id="project-cupid"><a class="anchor" href="#project-cupid"><span class="icon icon-link"></span></a>Project Cupid</h3>
<p>By July, with no end to the pandemic in sight, Carla and I decided to use the reservation we&#x27;d made as a hedge with New York State&#x27;s <a href="nyc.gov/Cupid">Project Cupid</a> to obtain a marriage license via Zoom.</p>
<p>Once we&#x27;d gotten the license -- issued by a bureaucrat via DocuSign -- we only needed 1. a minister registered with the city and state to perform Zoom weddings and 2. at least one witness physically located in New York state. We were lucky to find <a href="https://www.revannienyc.com/">Reverend Annie</a> online and called on our friends Nicole and Josh.</p>
<img alt="Not pictured: Ghost popping in and out of the frame like a true poltergeist, eating our bouquet" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwedding.33f6aca6.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwedding.33f6aca6.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwedding.33f6aca6.jpg&amp;w=3840&amp;q=75" width="1920" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>We were spread across Queens and Brooklyn, all except Rev. Annie who performed the virtual ceremony from the West Village. The paperwork is filed in the officiant&#x27;s borough, so we were officially married in Manhattan on July 31, 2020. üéâ</p>
<h2 id="fresh-air"><a class="anchor" href="#fresh-air"><span class="icon icon-link"></span></a>Fresh air</h2>
<p>We headed north to the Adirondacks in August where we mostly hiked, swam in lakes, worked and roasted marshmallows.</p>
<img alt="Hiking Cascade Mountain in the &#x27;dacks" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdacks.689db6ed.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdacks.689db6ed.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdacks.689db6ed.jpg&amp;w=2048&amp;q=75" width="1000" height="1333" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="years-end"><a class="anchor" href="#years-end"><span class="icon icon-link"></span></a>Year&#x27;s end</h2>
<p>The end of the year has been a blur, not unlike the rest. We&#x27;re grateful for family and friends with whom we&#x27;ve tried to remain connected, despite great distance and difficulty. Sending warm wishes to you, reader, wherever you are this holiday season.</p>
<p>- Alessia</p>
<img alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanStreet.da736228.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanStreet.da736228.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FjapanStreet.da736228.jpg&amp;w=2048&amp;q=75" width="1000" height="1000" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Typed Web Workers]]></title>
            <link>localhost:3000/typed-web-workers</link>
            <guid>localhost:3000/typed-web-workers</guid>
            <pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Getting Started with Web Workers in a TS Project]]></description>
            <content:encoded><![CDATA[<p>This post is about something that&#x27;s ultimately pretty simple but still took a bit of fiddling for me to figure out: how to come up with the correct TypeScript type for a Web Worker written in JavaScript. But first, a word on writing technical blog posts.</p>
<p>The best advice I&#x27;ve heard on the topic of coming up with ideas for technical blog posts was from <a href="https://www.writespeakcode.com/">Write/Speak/Code</a> MC <a href="https://twitter.com/techgirl1908">Angie Jones</a> at the 2018 conference.</p>
<blockquote>
<p>Quick plug for Write/Speak/Code: it&#x27;s one of the best conferences I&#x27;ve been to! It&#x27;s a conference for technologists with marginalized genders; if that describes you, I recommend you check it out.</p>
</blockquote>
<p>The genius of the conference is that it mixes professional development talks and panels with hands-on workshops. You hear from experts like Angie, someone who has maintained a popular technical blog for years, get some tips on how to get started and then you <strong>do the thing</strong>: in this case, you start writing a blog post and workshopping it with peers in the room. I can&#x27;t overstate what a great experience it was.</p>
<h3 id="the-blog-post-ideas-hidden-in-your-browser-history"><a class="anchor" href="#the-blog-post-ideas-hidden-in-your-browser-history"><span class="icon icon-link"></span></a>The Blog Post Ideas Hidden in Your Browser History</h3>
<p>To come up with ideas for material, Angie said we only needed to look as far as our browser histories. We&#x27;re all experts in our experiences: that means we don&#x27;t need to wait for an earth-shattering revelation to get writing. We just need to pick the last thing that stumped us and drove us down a Stack Overflow rabbit hole or sent us trawling through piles of closed GitHub issues to find a topic we can shed some light on. (That is, assuming we&#x27;ve already come out on the other side. If not: we&#x27;ve got this, the answer is probably one <em>extremely</em> specific search query away.)</p>
<p>If nothing else, she noted, her blog posts often helped Future Angie who would sometimes find herself facing the same issue years later only to come across a blog post she&#x27;d written!</p>
<p>It is in that spirit--of helping Future Alessia--that I&#x27;m writing this post.</p>
<h2 id="back-to-web-workers"><a class="anchor" href="#back-to-web-workers"><span class="icon icon-link"></span></a>Back to Web Workers</h2>
<p>I found myself reaching for a Web Worker recently. I was building some data vizualizations from raw CSVs, and in building the prototype I had to do a bunch of data wrangling, committing various JavaScript crimes in the process. Long story short, I introduced some significant lag on page load.</p>
<p>The computations I was doing were perfectly suited to happen off of the browser&#x27;s main thread, so as not to interfere with the other graphs I needed to start rendering. Web Workers to the rescue!</p>
<p>I was working on a Gatsby site and a quick search revealed, indeed, <strong>there&#x27;s a loader plugin for that</strong>: <a href="https://github.com/universse/gatsby-plugin-workerize-loader"><code>gatsby-plugin-workerize-loader</code></a>. It doesn&#x27;t do anything too fancy, just adds <code>workerize-loader</code> to your Webpack config and injects the worker scripts in <code>gatsby-ssr.js</code>.</p>
<p>The plugin <a href="https://github.com/universse/gatsby-plugin-workerize-loader#gatsby-plugin-workerize-loader">docs</a> demonstrate how to write a worker file with the expected suffix <code>.worker.js</code> in which you export your async function(s):</p>
<pre class="language-js"><code class="language-js"><span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">generateSeries</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> series <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword control-flow">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do expensive calculations</span>
  <span class="token punctuation">}</span>
  <span class="token keyword control-flow">return</span> series
<span class="token punctuation">}</span>
</code></pre>
<p>Then, in another file‚Äîsomething the docs refer to as a &quot;source file&quot;‚Äîyou can import and instantiate the Web Worker. (They only work in the browser, so in a Gatsby project you have to check that the window object is defined.)</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">DataWorker</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;./computeData.worker.js&#x27;</span>
<span class="token keyword">const</span> dataWorker <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token dom variable">window</span> <span class="token operator">===</span> <span class="token string">&#x27;object&#x27;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">DataWorker</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> dataWorker
</code></pre>
<h3 id="web-workers--ts"><a class="anchor" href="#web-workers--ts"><span class="icon icon-link"></span></a>Web Workers + TS</h3>
<p>In the docs, the example source file that imports the worker and instantiates it is a JavaScript file, but I happened to be working in a TypeScript project, so I gave it the <code>.ts</code> extension.</p>
<p>At this point, I knew I&#x27;d have to add some types for the functions my worker is exporting. After flipping through some docs, I added a sibling declaration file, <code>computeData.worker.d.ts</code>, and declared a class that extends TypeScript&#x27;s built-in <code>Worker</code> interface. It just needs a <code>constructor</code> and the type definitions for the functions I&#x27;m exporting, which return Promises.</p>
<p>Put it all together and you&#x27;ve got:</p>
<pre class="language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token maybe-class-name">ComputeDataWebWorker</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token maybe-class-name">Worker</span></span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token function">generateSeries</span><span class="token punctuation">(</span>data<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token maybe-class-name">AnalysisYears</span><span class="token punctuation">;</span> data<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>

  <span class="token function">sumDailyTotals</span><span class="token punctuation">(</span>
    data<span class="token operator">:</span> <span class="token maybe-class-name">Point</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    column<span class="token operator">:</span> <span class="token string">&#x27;Demand__MW_&#x27;</span> <span class="token operator">|</span> <span class="token string">&#x27;Net_Generation__MW_&#x27;</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">ComputeDataWebWorker</span>
</code></pre>
<p>Ta da üåº Type-safe Web Workers in your Gatsby app.</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Building a Gatsby Plugin with Wasm]]></title>
            <link>localhost:3000/gatsby-wasm-plugin</link>
            <guid>localhost:3000/gatsby-wasm-plugin</guid>
            <pubDate>Mon, 06 Jan 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Rust + Wasm + Node.js = ü¶Äüï∏üíö]]></description>
            <content:encoded><![CDATA[<blockquote>
<p><strong>Law of the Instrument</strong>: &quot;I suppose it is tempting, if the only tool you have is a hammer, to treat everything as if it were a nail.&quot; - Abraham Maslow, 1966</p>
</blockquote>
<img alt="Proof of concept: generating my first Open Graph images for Twitter cards with Rust and WebAssembly" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdemo.97e51024.jpg&amp;w=3840&amp;q=75 1x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fdemo.97e51024.jpg&amp;w=3840&amp;q=75" width="2118" height="1596" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="the-problem"><a class="anchor" href="#the-problem"><span class="icon icon-link"></span></a>The Problem</h2>
<p>Back in August, I was looking to generate some <a href="https://ogp.me/">Open Graph</a> images for blog posts I was publishing to this very Gatsby site (as in the photos that appear when one of my posts is shared in most social apps). The idea is simple: <strong>take each post&#x27;s metadata</strong> and <strong>create images containing some text</strong> (title, author, site name) at build time.</p>
<p>I had some requirements in mind: I wanted to supply a <strong>custom font</strong>, and if that wasn&#x27;t possible, at least use a <strong>monospace font</strong> (for the personal <code>#brand</code>). A custom background image would be a bonus.</p>
<p>I couldn&#x27;t find an existing solution that met these requirements, so I set out to build my own. Some interesting constraints led me to Rust and WebAssembly, though I also admittedly found myself holding a Rust-and-Wasm-shaped hammer after working with both technologies to build an interactive web app at <a href="https://recurse.com">RC</a>.</p>
<h2 id="why-webassembly"><a class="anchor" href="#why-webassembly"><span class="icon icon-link"></span></a>Why WebAssembly?</h2>
<p>The prior art for Open Graph image generator plugins in the Gatsby space consists mainly of <code>gatsby-remark-social-cards</code>. I came across some <a href="https://github.com/sw-yx/swyxdotio/tree/master/screenshot-plugin">other</a> <a href="https://lannonbr.com/blog/2019-11-10-og-images/">approaches</a> that involve writing bespoke code to achieve more complex layouts by rendering some HTML on the server and using Puppeteer to take screenshots, but these felt too heavy-handed for my use case.</p>
<p>After taking a look through the README, <code>gatsby-remark-social-cards</code> fit all my criteria <strong>except for the font</strong> (it only supports DejaVuSansCondensed). This is for a purely practical reason: the main library for image processing in Node.js <em>with zero native dependencies</em> is <a href="https://www.npmjs.com/package/jimp"><code>jimp</code></a>. And <code>jimp</code> only supports <strong>bitmap fonts</strong>.</p>
<h2 id="bitmap-fonts"><a class="anchor" href="#bitmap-fonts"><span class="icon icon-link"></span></a>Bitmap Fonts</h2>
<img alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbitmap.2f550db3.jpg&amp;w=750&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbitmap.2f550db3.jpg&amp;w=1920&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fbitmap.2f550db3.jpg&amp;w=1920&amp;q=75" width="731" height="285" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Bitmap fonts are comprised of a matrix of pixels, so they can&#x27;t be scaled or styled like vector/&quot;scalable&quot; fonts (think TTF/OTF). In practice, this means a standalone font file is needed for every combination of font size, color and weight. Indeed, the plugin I was examining had a <code>/fonts</code> folder containing <strong>twenty different <code>.fnt</code> files</strong> for a single typeface styled twenty different ways üò≤</p>
<h3 id="aside-netlify-build-image"><a class="anchor" href="#aside-netlify-build-image"><span class="icon icon-link"></span></a>Aside: Netlify Build Image</h3>
<p>I generate this site with Netlify and its build image includes native dependencies <a href="https://github.com/netlify/build-image/blob/xenial/Dockerfile#L59"><code>graphicsmagick</code></a> and <a href="https://github.com/netlify/build-image/blob/xenial/Dockerfile#L63"><code>imagemagick</code></a>, so I could have used a Node library like <code>gm</code> to render text in the vector font of my choice. I didn&#x27;t want one of my Gatsby plugin&#x27;s dependencies to require native dependencies, however, even if it would work out of the box for me and other Netlify users.</p>
<p>Alas, I was back at square one: <code>jimp</code> + bitmap fonts. The thought of having to download a program to generate a bitmap font file for every text style I wanted to try was deeply unappealing, not to mention the lack of configurability for users of my plugin, the very problem that set me down this path in the first place... There had to be a better way‚Ñ¢Ô∏è Which brings us back to Rust+WebAssembly.</p>
<h2 id="step-1-write-rust"><a class="anchor" href="#step-1-write-rust"><span class="icon icon-link"></span></a>Step 1: Write Rust</h2>
<p>I&#x27;ve been learning Rust on and off over the past year, and while I&#x27;m familiar with many aspects of the language, though still a relative beginner, I knew exactly nothing about low level text layout when starting this project. I picked a <em>crate</em> (synonymous with &quot;library&quot; or &quot;package&quot; in other languages) that seemed to handle my use case called <a href="https://docs.rs/fonterator/0.6.0/fonterator/"><code>fonterator</code></a>, grabbed the example code from the docs and used <a href="https://github.com/rustwasm/wasm-pack-template">this template</a> to spin up a Rust + Wasm project with <code>wasm-pack</code>.</p>
<p>The <code>fonterator</code> demo uses the crate to render some text in English and Korean and finally calls:</p>
<pre class="language-rust"><code class="language-rust"><span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;out.png&quot;</span><span class="token punctuation">,</span> out_data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to save image&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><code>std::fs::write</code> is a function in the Rust standard library that writes to a file, as you&#x27;d expect. It saved <code>out.png</code> to my machine when I compiled and ran the Rust program locally üéâ</p>
<h2 id="rust--wasm"><a class="anchor" href="#rust--wasm"><span class="icon icon-link"></span></a>Rust ‚Üí Wasm</h2>
<p>The next step was to annotate my Rust function with <code>#[wasm_bindgen]</code>, compile my Rust to WebAssembly and call the function via generated JavaScript interface from my Node script. Nothing else about my code was changing, and if all went well, I&#x27;d still get my <code>out.png</code>!</p>
<p>Not so fast:</p>
<pre class="language-rust"><code class="language-rust"><span class="token class-name">Error</span><span class="token punctuation">:</span> operation not supported on wasm yet
</code></pre>
<p>Oops. When compiling Rust for the <code>wasm32-unknown-unknown</code> target, the Rust standard library can only assume the WebAssembly instruction set, and since Wasm provides no means of doing I/O, these stubs are left to return errors in the standard library.</p>
<p>The Rust and WebAssembly book has a helpful section on how to add Wasm support to a general-purpose Rust crate. The first tip: <a href="https://rustwasm.github.io/book/reference/add-wasm-support-to-crate.html#avoid-performing-io-directly">avoid performing I/O directly</a> üòÄ</p>
<blockquote>
<p>Why is the target called <code>wasm32-unknown-unknown</code>? <code>wasm32</code> means the address space is 32-bits large, the first <code>unknown</code> refers to the system the code is compiling on, and the second refers to the system being targeted: <code>unknown-unknown</code> implies &quot;compile on almost any machine, run on almost any machine.&quot;</p>
</blockquote>
<h2 id="uint8array-all-day"><a class="anchor" href="#uint8array-all-day"><span class="icon icon-link"></span></a>Uint8Array All Day</h2>
<p>Since I can&#x27;t perform I/O from my Rust-generated Wasm, I&#x27;d have to pass in the font as a <code>Uint8Array</code> and return a <code>Uint8Array</code> buffer of rendered text. The Rust API I settled on looks like this:</p>
<pre class="language-rust"><code class="language-rust"><span class="token attribute attr-name">#[wasm_bindgen]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">generate_text</span><span class="token punctuation">(</span>
    title<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>
    author<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>
    title_font_size<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    subtitle_font_size<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span>
    rgb<span class="token punctuation">:</span> <span class="token class-name">JsValue</span><span class="token punctuation">,</span>
    font_style<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span>
    font_file<span class="token punctuation">:</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre>
<p><code>generate_text</code> takes the strings to be rendered and some config: font sizes, RGB value for text color passed in as a <code>JsValue</code> converted to a Rust tuple and either a string to set the font style using preselected open source fonts or a TTF font as <code>Uint8Array</code>. It then lays out the text, draws the glyphs to a dynamic image backed by a buffer of RGBA pixels and returns a <code>Vec&lt;u8&gt;</code> buffer of pixel data.</p>
<h3 id="publishing-wasm"><a class="anchor" href="#publishing-wasm"><span class="icon icon-link"></span></a>Publishing Wasm</h3>
<p>Once you&#x27;re done writing your Rust, publishing your Wasm couldn&#x27;t be easier: the CLI <code>wasm-pack</code> generates the Wasm module, all the JS glue, TypeScript types <em>and</em> publishes to the npm registry ü§ò I blinked and had published <a href="https://github.com/alessbell/wasm-twitter-card/"><code>wasm-twitter-card</code></a>.</p>
<h2 id="putting-it-all-together"><a class="anchor" href="#putting-it-all-together"><span class="icon icon-link"></span></a>Putting It All Together</h2>
<p>I could then require my Wasm module and call <code>generate_text</code> like any regular JS function. This is the meat of my Gatsby plugin <a href="https://github.com/alessbell/gatsby-remark-twitter-cards"><code>gatsby-remark-twitter-cards</code></a>: it uses <code>fs.readFileSync</code> to read a TTF font to a buffer passed to our Wasm code.</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token maybe-class-name">Jimp</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;jimp&#x27;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> twitterCard <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#x27;wasm-twitter-card&#x27;</span><span class="token punctuation">)</span>

<span class="token comment">// utility functions for reading/initializing jimp images</span>

module<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> markdownNode <span class="token punctuation">}</span><span class="token punctuation">,</span> config</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fontToUint8Array <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token property-access">fontFile</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> buffer <span class="token operator">=</span> twitterCard<span class="token punctuation">.</span><span class="token method function property-access">generate_text</span><span class="token punctuation">(</span>
    post<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">,</span>
    <span class="token comment">// ...</span>
    fontToUint8Array
  <span class="token punctuation">)</span>
  <span class="token keyword control-flow">return</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">generateBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">writeTextToCard</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>base<span class="token punctuation">,</span> text<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> base<span class="token punctuation">.</span><span class="token method function property-access">composite</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">image</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span>
      image
        <span class="token punctuation">.</span><span class="token method function property-access">writeAsync</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;Generated Twitter Card: &#x27;</span><span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token keyword control-flow">catch</span><span class="token punctuation">(</span><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token property-access">error</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>I no longer needed to use bitmap fonts, but <code>jimp</code> was the perfect library to stitch everything together. I was amazed at how easy it was: I <strong>initialized a Jimp image for the card background</strong> from the user-provided image (or created one consisting of a solid color), then called my Wasm function and <strong>read the text as a buffer of pixel data into a second Jimp image</strong>. Finally, I&#x27;d <strong>composite the latter over the former</strong>, a one-liner with <code>jimp</code>, save the final image and voil√†.</p>
<img alt="The resulting image for this post, using the same typeface and gradient that appear elsewhere on this website üòç" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftwitter-card.46ca607c.jpg&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftwitter-card.46ca607c.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftwitter-card.46ca607c.jpg&amp;w=3840&amp;q=75" width="1200" height="630" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Once I saw the result, I was glad I had ventured down this particular rabbit hole!</p>
<h2 id="missing-glyphs"><a class="anchor" href="#missing-glyphs"><span class="icon icon-link"></span></a>Missing Glyphs</h2>
<p>There were a few bumps along the road, mainly falling into the category of missing or incorrectly rendered glyphs:</p>
<p><img src="./glitches.png" alt=""/></p>
<img alt="The image on the left is supposed to say &#x27;2019&#x27;, while the image on the right is missing glyphs d, q and w" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fglitches.b2587cd0.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fglitches.b2587cd0.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fglitches.b2587cd0.jpg&amp;w=3840&amp;q=75" width="1840" height="1200" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>After some head scratching, I chalked it up to a bug in <code>fonterator</code> and moved to <code>rusttype</code> as my underlying text rendering crate which fixed things (I would also realize I needed something like <code>glyph_brush_layout</code> to handle layout/text wrapping). I still don&#x27;t know exactly what the issue with <code>fonterator</code> was, but I received the following thoughtful comment from the folks at the font editor FontForge via Twitter:</p>
<blockquote>
<p>I would check the directionality of the glyphs in your image. I noticed that &quot;b&quot; and &quot;p&quot; are OK, yet &quot;d&quot; and &quot;q&quot; are not. I think the problem is that splines which should be clockwise are counter, and those which should be counter are clockwise. Try e.g. &quot;Correct Direction&quot;.</p>
</blockquote>
<p>I still lack some context here, but I&#x27;d love to dig in and try to find the fix. If anyone has any ideas, let me know!</p>
<h2 id="conclusion"><a class="anchor" href="#conclusion"><span class="icon icon-link"></span></a>Conclusion</h2>
<p>This was a fun and unexpected introduction to solving a real world problem with emerging tech I remain fascinated by.</p>
<p>A few takeaways:</p>
<ul>
<li>The partially self-imposed constraints made this more fun! A native dependency-free solution was in the cards after all thanks to WebAssembly.</li>
<li>The complexity that underlies rendering 2D text to screens is humbling once you scratch the surface. It&#x27;s too often and too easily taken for granted.</li>
<li>Rust is a vast language that has introduced me to many new concepts, chief among them the ownership model of memory management. There is a dauntingly long list of language features I have yet to master (lifetimes! <a href="https://turbo.fish/">turbofish!</a> üòâ), but I don&#x27;t need to master them all to start writing Rust. I can start with the parts I need, and go from there.</li>
</ul>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[2019]]></title>
            <link>localhost:3000/2019</link>
            <guid>localhost:3000/2019</guid>
            <pubDate>Sun, 01 Dec 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<img alt="Taking a hike around the &#x27;Grand Canyon of the Pacific&#x27; in Waimea Canyon State Park, Kaua&#x27;i (Feb &#x27;19)" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FcarlAless.1133bc9e.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FcarlAless.1133bc9e.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FcarlAless.1133bc9e.jpg&amp;w=3840&amp;q=75" width="1616" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>2019 was a year of 4 weddings (the fourth and final thanks to an elopement we unwittingly crashed, congrats John &amp; Sara!), 2 gifted wedding eggs (congrats Robin &amp; Mark!), 2 new baby cousins (congrats Jess &amp; Anth and Christina &amp; Zach!), 1 adopted cat and 9 states visited (excluding home state NY that&#x27;s RI, MA, HI, VA, MD, PA, CA, CT and NJ).</p>
<p>A friend <a href="https://www.alxmnn.com/">inspired</a> me to write up a few things that happened this year. If you&#x27;ve found your way here, take a minute and join us for a whip around the last 12 months.</p>
<h2 id="carla-peter-carlos--ghost"><a class="anchor" href="#carla-peter-carlos--ghost"><span class="icon icon-link"></span></a>Carla, Peter Carlos &amp; Ghost</h2>
<p>Since being admitted to the Eastern District&#x27;s CJA (Criminal Justice Act) panel for federal indigent defense in January, <strong>Carla</strong>&#x27;s practice has been growing apace. While running her own law firm and keeping one of the busiest schedules of anyone I know, she nevertheless manages to Citi Bike to midtown most days and care for not one but two small creatures, in addition to me.</p>
<p>Carla continues to earn the title of &quot;Neighbourhood Pied Piper of Adorable Animals&quot;: most everyone knows <strong>Peter Carlos</strong>, the good-natured chicken who walked into Carla&#x27;s life three years ago and never left. 2019 in turn brought us <strong>Ghost</strong>, a young cat with white fur and a little grey cap.</p>
<img alt="Our equal parts sweet and mischievous cat, Ghost." srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FghostCarpet.32519150.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FghostCarpet.32519150.jpg&amp;w=2048&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FghostCarpet.32519150.jpg&amp;w=2048&amp;q=75" width="1000" height="1000" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Our friend <strong>Andrew</strong>, a person with far too much idle time on his hands, lovingly built Ghost <a href="https://twitter.com/alessbell/status/1186300433633075201">a cat ladder up to our second story apartment</a> so Ghost could begin to get acquainted with his new home. The ladder was a hit and, so far, it seems he likes what he&#x27;s found at the top.</p>
<img alt="Carla and Peter Carlos, the most resilient chicken I will ever know, hard at work building Ghost&#x27;s massive outdoor cat ladder" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FcarlAndPete.c2f90784.jpg&amp;w=828&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FcarlAndPete.c2f90784.jpg&amp;w=1920&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FcarlAndPete.c2f90784.jpg&amp;w=1920&amp;q=75" width="800" height="1067" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Finally, an affable web developer offered to make Carla a new website; in June the new and improved <a href="https://carlasandersonlaw.com">carlasandersonlaw.com</a> came online.</p>
<h2 id="the-bellisarios"><a class="anchor" href="#the-bellisarios"><span class="icon icon-link"></span></a>The Bellisarios</h2>
<p><strong>Erica</strong> and <strong>Santino</strong> were thrilled to have their three kids along for the ride in Rome this July, in addition to the sixty-odd other kids they were legally responsible for.</p>
<img alt="Carla and Erica taking in the sights‚Äîand spritzes‚Äîat the Spanish Steps (July &#x27;19)" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FericaCarl.bf2b5d35.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2FericaCarl.bf2b5d35.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FericaCarl.bf2b5d35.jpg&amp;w=3840&amp;q=75" width="1500" height="1500" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Younger brother <strong>Luca</strong>, ever the peacemaker and overall agreeable Bellisario, had no trouble making new friends in Italy despite the language barrier.</p>
<p>An older gentleman living near our hotel would see Luca on his way to the subway and wave him over for some help navigating Rome&#x27;s precarious streets. They&#x27;d walk together for several blocks until the man would wave Luca off, having arrived at his destination. In Italy as in life, few words, a smile and many wild gestures can go a long way.</p>
<img alt="Luca helping an older gentleman in a wheelchair get to his destination" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fluca.cc9645a8.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fluca.cc9645a8.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fluca.cc9645a8.jpg&amp;w=3840&amp;q=75" width="1500" height="1500" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>In the spring, Luca graduated with a bachelors degree with high distinction from U of T--no small feat says the woman who did a victory lap and still barely got out alive--and began graduate school in the fall, also at U of T.</p>
<p><strong>Martina</strong>, my big sister in every meaningful way except birth order, wrapped up a stint at a top communications firm in Toronto and began her legal studies at, you guessed it, U of T. As someone who still bears the battle scars from kitchen table &quot;debates&quot; with Martina over the years, I cannot wait to see the havoc she will wreak in the professional world.</p>
<img alt="Alessia holding her cousin&#x27;s son, Giacomo" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgiac.51d298c6.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgiac.51d298c6.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgiac.51d298c6.jpg&amp;w=3840&amp;q=75" width="1500" height="2000" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>On January 21, <strong>Jessica and Anthony</strong> welcomed beautiful baby <strong>Giacomo</strong>. He is implausibly chill for an infant, setting the bar nice and high for Bellisario babies to come. His arrival, complete with mini Lowry jersey, almost certainly spurred the Raptors to their uncharacteristic championship. We thank Giacomo for all he has done in his first eleven months with us.</p>
<p>For my part, I had the amazing opportunity to join the <a href="https://recurse.com">Recurse Center</a> in April for a mini batch, which is to say I spent a week in downtown Brooklyn among likeminded programmers exploring a language called Rust. I compiled my Rust to Wasm in order to do some neat interactive stuff with the DOM. <em>In other words</em>, I <a href="https://happy-faces.glitch.me">drew a bunch of moving circles on a web page</a>.</p>
<img alt="A few of the amazing (and functional!) vintage computers at the Recurse Center (April &#x27;19)" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frc.96e45f34.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frc.96e45f34.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Frc.96e45f34.jpg&amp;w=3840&amp;q=75" width="1500" height="1500" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>I learned a few other useful things this year, too, like how to <a href="https://twitter.com/alessbell/status/1122223104451928064">build a &quot;split&quot; keyboard</a>, how to <a href="https://twitter.com/alessbell/status/1155525840882536451">use a robotic arm called EggBot to programmatically draw on small spherical and egg-shaped objects</a> (namely eggs, see: Peter Carlos) and how to make holiday cards using a solution to the <a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem">travelling salesman problem</a>.</p>
<img alt="A pen plotter holiday greeting card that is using a traveling salesman algorithm to create a Christmass tree out of a single line traversing many points" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftrees.47b7c7ae.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftrees.47b7c7ae.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Ftrees.47b7c7ae.jpg&amp;w=3840&amp;q=75" width="1616" height="1080" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>As the year and decade wind down, I&#x27;m eagerly anticipating all the time with loved ones this season affords... especially when those loved ones include three wise, wonderful grandparents who relentlessly pressure me to move home to Toronto ‚ù§Ô∏è</p>
<img alt="Two of three grandparents I miss terribly in NYC, Carmina and Maria, with sister Martina. Not pictured: Aldo &#x27;The Boss&#x27; Troiani" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fnonnas.62c102dd.jpg&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fnonnas.62c102dd.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fnonnas.62c102dd.jpg&amp;w=3840&amp;q=75" width="1500" height="1125" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Sending love to all my friends and family near and far. See you in 2020!</p>
<p>- Alessia</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Resume as Code]]></title>
            <link>localhost:3000/resume-as-code</link>
            <guid>localhost:3000/resume-as-code</guid>
            <pubDate>Tue, 08 Oct 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Building a Resume with LaTeX + GitHub Actions]]></description>
            <content:encoded><![CDATA[<p>I avoid brand new tech until I have an itch to scratch: a small, self-contained problem that seems it might lend itself nicely to $someTool. I&#x27;m usually unsure I&#x27;ll be able to achieve what I have in mind. But <em>maybe...</em></p>
<p>This time, the problem was something that had annoyed me for as long as I&#x27;d been employed: resumes. Not the fact of them, or even writing them, necessarily. Just <strong>managing different versions</strong>.</p>
<p>I was swimming in Dropbox folders with dozens of files saved in various formats; I needed to maintain multiple documents to preserve different iterations, and export PDFs for distribution. Version control was a nightmare.</p>
<h2 id="latex-and-git-to-the-rescue"><a class="anchor" href="#latex-and-git-to-the-rescue"><span class="icon icon-link"></span></a>LaTeX and git to the Rescue</h2>
<p>One day I happened upon <a href="https://github.com/dcousineau">Daniel Cousineau</a>&#x27;s <a href="https://github.com/dcousineau/resume"><code>resume</code></a>. Daniel was using a tool I&#x27;d heard of but never worked with called <a href="https://www.latex-project.org/about/">LaTeX</a> (a system for generating documents, and not a particularly new one), along with GitHub releases to track his resume&#x27;s evolution. It seemed promising.</p>
<p>I set up <a href="https://github.com/alessbell/resume/"><code>alessbell/resume</code></a>, rewrote my resume as <code>resume.tex</code> and, back in June, released <code>v1.0</code> üéâ</p>
<h2 id="wherefore-art-github-actions"><a class="anchor" href="#wherefore-art-github-actions"><span class="icon icon-link"></span></a>Wherefore Art GitHub Actions</h2>
<p>Having a resume managed in GitHub was a <em>very</em> welcome change, but there were still a few manual steps every time I wanted to cut a release:</p>
<ol>
<li><strong>Draft a new release via GitHub UI.</strong> Tag my commit and begin manually creating the release.</li>
<li><strong>Manually compile <code>resume.tex</code> and upload the PDF as a release asset.</strong> GitHub automatically includes the source code in both zip and tarball formats, but I wanted to include a compiled <code>resume.pdf</code>, too. I&#x27;d run <code>pdflatex</code> locally and drag and drop the file, again via GitHub UI.</li>
<li><strong>Update the copy of <code>resume.pdf</code> in Gatsby&#x27;s <code>/static</code> folder.</strong> I&#x27;d take my new PDF and drag and drop it into my local copy of the <a href="https://github.com/alessbell/aless.co/">codebase for this website</a>, since I want <a href="https://aless.co/resume.pdf">aless.co/resume.pdf</a> to always display the latest version. Then I&#x27;d manually commit it and open a PR.</li>
</ol>
<p>Once I&#x27;d isolated the steps that were candidates for automation, I sketched out the ideal workflow: first, automating releases in <code>alessbell/resume</code>, then somehow pinging another repository when a new release was published (?), and finally, the other repository (this blog) would download <code>resume.pdf</code> from the latest release, commit it and open a PR... <em>maybe?</em></p>
<p>I had no idea how feasible this all was, still knowing little to nothing about the GitHub Actions API. But automating even one step would be a win!</p>
<h2 id="spoiler-alert"><a class="anchor" href="#spoiler-alert"><span class="icon icon-link"></span></a>Spoiler Alert</h2>
<p>tl;dr my ideal workflow was possible, so I built it üêôüíú</p>
<p>If you&#x27;d like to browse the code, steps 1 and 2 are achieved by the <a href="https://github.com/alessbell/resume/blob/main/.github/workflows/main.yml">main workflow in <code>alessbell/resume</code></a>. Step 3 is handled by actions in this blog&#x27;s repository, namely <a href="https://github.com/alessbell/aless.co/blob/main/commit-resume/entrypoint.sh"><code>/commit-resume</code></a>. For a walk-through of the code, keep reading üòé</p>
<img alt="A screenshot of the GitHub Pull Requests UI showing the first PR created by my GitHub action: entitled &#x27;Update resume to v1.1&#x27;, this PR automatically updates my aless.co resume PDF with the one it downloaded from the latest automated release in another repository" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fresume-pr.1be21895.jpg&amp;w=3840&amp;q=75 1x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fresume-pr.1be21895.jpg&amp;w=3840&amp;q=75" width="2386" height="1720" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h3 id="1-compile-the-pdf-and-automate-releases"><a class="anchor" href="#1-compile-the-pdf-and-automate-releases"><span class="icon icon-link"></span></a>1. Compile the PDF and Automate Releases</h3>
<p>I figured automating the release part would be easy‚Äî<em>surely there&#x27;s already an action for that</em>‚Äîbut I wasn&#x27;t so sure about compiling the LaTeX to PDF for inclusion in the release.</p>
<p>Delightfully, both steps turned out to be trivial to implement. I found off-the-shelf actions for both: <a href="https://github.com/xu-cheng/latex-action"><code>xu-cheng/latex-action</code></a> for compiling my LaTeX to PDF and <a href="https://github.com/softprops/action-gh-release"><code>softprops/action-gh-release</code></a> for creating the GitHub release with the compiled PDF from the previous step attached as an asset.</p>
<p>My first workflow looked like this:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Publish new release of resume
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">tags</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&#x27;v*.*&#x27;</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Compile LaTeX document
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> xu<span class="token punctuation">-</span>cheng/latex<span class="token punctuation">-</span>action@master
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">root_file</span><span class="token punctuation">:</span> resume.tex
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Release
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> softprops/action<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>release@v1
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">files</span><span class="token punctuation">:</span> resume.pdf
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre>
<p>This workflow runs on any <code>push</code> event targeting tags matching the glob pattern <code>v*.*</code> (<a href="https://help.github.com/en/articles/workflow-syntax-for-github-actions#onpushpull_requestbranchestags">docs</a>). The first step, <a href="https://github.com/actions/checkout"><code>actions/checkout</code></a>, checks out the repository to the current GitHub workspace so that the workflow can access the contents of your repository.</p>
<p>After that, I can pass the next step the name of my file, <code>resume.tex</code>, and the subsequent step can directly access the compiled <code>resume.pdf</code> from the previous one. In order to author a release, I need to pass in a <code>GITHUB_TOKEN</code>; luckily GitHub already makes certain <a href="https://help.github.com/en/articles/virtual-environments-for-github-actions#github_token-secret">environment variables</a> available.</p>
<h3 id="2-ping-another-repository"><a class="anchor" href="#2-ping-another-repository"><span class="icon icon-link"></span></a>2. Ping Another Repository</h3>
<p>In order to keep the version of my resume displayed on this website up-to-date, I&#x27;d need a way to kick off a new workflow each time I published <code>alessbell/resume</code>.</p>
<p>Luckily, such an event exists: <a href="https://developer.github.com/v3/repos/#create-a-repository-dispatch-event"><code>repository_dispatch</code></a> triggers a webhook event &quot;when you want to trigger a GitHub Actions workflow for activity that happens outside of GitHub,&quot; or, in this case, in a different repository&#x27;s action. A simple curl request with the correct auth token, headers and body does the trick.</p>
<p>This is the <a href="https://github.com/alessbell/resume/blob/main/ping-repo/entrypoint.sh">whole bash script</a> from <code>alessbell/resume/ping-repo</code>:</p>
<pre class="language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">curl</span> -XPOST -H <span class="token string">&quot;Accept: application/vnd.github.everest-preview+json&quot;</span> <span class="token punctuation">\</span>
  -H <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token punctuation">\</span>
  -H <span class="token string">&quot;Authorization: token <span class="token variable">${GITHUB_TOKEN}</span>&quot;</span> <span class="token punctuation">\</span>
  <span class="token string">&quot;https://api.github.com/repos/<span class="token variable">${REPO}</span>/dispatches&quot;</span> <span class="token punctuation">\</span>
  --data <span class="token string">&#x27;{&quot;event_type&quot;: &quot;update_resume&quot;}&#x27;</span>
<span class="token punctuation">}</span>

main
</code></pre>
<p>There were two small caveats here. <strong>First</strong>, because this POST request is being dispatched for a repository other than the one from the action&#x27;s execution context, I needed a <a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">personal access token</a> with <code>repository</code> scope set as a <a href="https://help.github.com/en/articles/virtual-environments-for-github-actions#creating-and-using-secrets-encrypted-variables">secret on the repository</a>. I stored my secret as <code>PA_TOKEN</code> and passed it in the way I had the others:</p>
<pre class="language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Pings repo
  <span class="token key atrule">uses</span><span class="token punctuation">:</span> ./ping<span class="token punctuation">-</span>repo
  <span class="token key atrule">env</span><span class="token punctuation">:</span>
    <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.PA_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token key atrule">REPO</span><span class="token punctuation">:</span> alessbell/aless.co
</code></pre>
<p><strong>Second</strong>, certain events, e.g. <code>push</code> will run on any branch unless the scope is narrowed by specifying a certain branch or tag. When I was testing this <code>repository_dispatch</code> event, however, nothing was happening despite having pushed a workflow to a branch in my blog&#x27;s repository listening for this exact dispatch event. It wasn&#x27;t until I pushed the blog&#x27;s workflow config to master that I saw it spring to life, activated by my Postman request to the <code>/dispatches</code> endpoint.</p>
<h3 id="3-download-new-pdf-open-pr"><a class="anchor" href="#3-download-new-pdf-open-pr"><span class="icon icon-link"></span></a>3. Download New PDF, Open PR</h3>
<p>This final step felt like a stretch goal, but it proved to be just enough work for a train ride from Rhode Island to NYC. The first part involves fetching the latest version of <code>alessbell/resume</code>, and GitHub&#x27;s API has a dedicated endpoint for retrieving information about a repository&#x27;s latest release:</p>
<pre class="language-bash"><code class="language-bash"><span class="token assign-left variable">RELEASES_URL</span><span class="token operator">=</span>https://api.github.com/repos/alessbell/resume/releases/latest

<span class="token assign-left variable">RES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -sSL -H <span class="token string">&quot;<span class="token variable">${AUTH_HEADER}</span>&quot;</span> -H <span class="token string">&quot;<span class="token variable">${HEADER}</span>&quot;</span> --user <span class="token string">&quot;<span class="token variable">${GITHUB_ACTOR}</span>&quot;</span> -X GET $<span class="token punctuation">{</span>RELEASES_URL<span class="token punctuation">}</span><span class="token variable">)</span></span>
<span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">${RES}</span>&quot;</span> <span class="token operator">|</span> jq --raw-output <span class="token string">&#x27;.tag_name&#x27;</span><span class="token variable">)</span></span>
<span class="token assign-left variable">PDF_URL</span><span class="token operator">=</span><span class="token string">&quot;https://github.com/alessbell/resume/releases/download/<span class="token variable">${VERSION}</span>/resume.pdf&quot;</span>

<span class="token comment"># download resume.pdf and save in /static/resume.pdf</span>
<span class="token function">curl</span> -L0 <span class="token string">&quot;<span class="token variable">${PDF_URL}</span>&quot;</span> --output ./static/resume.pdf
</code></pre>
<p>Once I had the file downloaded, I&#x27;d just need to commit it and open a PR. This time, I&#x27;d try to use a pre-existing action with a bit less luck: I wasn&#x27;t able to integrate <a href="https://github.com/marketplace/actions/pull-request-on-branch-push"><code>vsoch/pull-request-action</code></a> directly (I&#x27;ll be the first to say it could have been user error -- when I&#x27;m out of my comfort zone, I need to be able to tinker with the code), but reading its source taught me a lot about how to write a similar action that would work for my case.</p>
<p>I wound up with <a href="https://github.com/alessbell/aless.co/blob/main/commit-resume/entrypoint.sh">~90 lines of bash</a> and successfully used <a href="https://stedolan.github.io/jq/"><code>jq</code></a> to process JSON for the first time. There was plenty of trial and error along the way, but once I plugged it all together, it Just Worked.</p>
<hr/>
<p>Writing bash and yaml isn&#x27;t part of my day job, but it was a lot of fun once I got started; tinkering with GitHub Actions was the perfect excuse to learn something new while scratching an itch.</p>
<p>Is there a workflow you&#x27;re thinking about automating? I&#x27;d be curious to hear about it -- you can ping me on twitter at <a href="https://twitter.com/alessbell">@alessbell</a> or email me at <a href="mailto:web@bellisar.io">web[at]bellisar.io</a>.</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[How to Build a Keyboard, Pt.1]]></title>
            <link>localhost:3000/how-to-build-a-keyboard</link>
            <guid>localhost:3000/how-to-build-a-keyboard</guid>
            <pubDate>Mon, 27 May 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn to Solder]]></description>
            <content:encoded><![CDATA[<p>A few years ago, a friend and coworker came in to work one day with a mechanical keyboard under his arm. If memory serves, it was a standard 87-key layout with Cherry MX Blue switches, but all anyone noticed were the keycaps.</p>
<p>I was happily a standard issue MacBook keyboard user at the time (pre-2015 redesign, RIP). I&#x27;d never typed on anything else. Glancing over at his desk as he set it down, I was the first to pose the question I&#x27;d later hear him field a few times a week: <em>...but where are the letters?</em></p>
<p>He had chosen a flashy pattern of multicoloured, and crucially, <em>blank</em> keycaps. Something about them was both endearing and an affront. They said: &quot;I&#x27;m a confident touch typer making a playful aesthetic choice,&quot; and also &quot;if you&#x27;re not in the club, I am the functional equivalent of a gilded tray of marbles.&quot; I was mystified.</p>
<h2 id="wasd"><a class="anchor" href="#wasd"><span class="icon icon-link"></span></a>WASD</h2>
<p>My first mechanical keybord was one I would purchase preassembled: a WASD 87-key &quot;v2&quot; build. It (not coincidentally) also had blank keycaps, though I went with the slightly quieter but still satisfyingly tacticle Cherry MX Brown switches. I was a fast typist, but I found myself hedging: I got my initials in highlighter yellow as a visual anchor üíõ</p>
<img alt="My first mechanical keyboard: WASD 87-key with Cherry MX Brown switches and seafoam green, pink, purple, grey and yellow keycaps" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwasd.a18b4d8a.jpg&amp;w=2048&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwasd.a18b4d8a.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwasd.a18b4d8a.jpg&amp;w=3840&amp;q=75" width="2044" height="1457" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>I loved it and used it every day for almost two years. And then I saw the Planck.</p>
<h2 id="planck-olkb"><a class="anchor" href="#planck-olkb"><span class="icon icon-link"></span></a>Planck OLKB</h2>
<p>The Planck looked more like a practical joke than a productivity tool the first time I saw it. Its petite size (40% the size of a typical keyboard) and unusual grid layout (&quot;ortholinear&quot;) give the Planck both a strange and satisfyingly symmetrical look.</p>
<p>It was so fundamentally different from every keyboard I&#x27;d ever seen that at first I was genuinely confused as to whether it was some kind of art project or if people actually used it to get things done. Frustratingly, this question seemed to have an answer so obvious that no one had wasted their time posting it online, until an internet commenter somewhere assured, no, seriously, they use their Planck at work! That was all I needed.</p>
<p>If you&#x27;re still wondering about that maybe-fake-sounding term &quot;ortholinear,&quot; here&#x27;s a bit of history from <a href="https://olkb.com/reference/primer">OLKB</a>:</p>
<blockquote>
<p>Ortholinear is a semi-made-up word that was originally coined (to my knowledge) by TypeMatrix as &quot;ortho-linear&quot; - this term got concatenated, became popular among the keyboard community, and eventually became the banner for a keyboard company!</p>
</blockquote>
<p>The company OLKB (<strong>O</strong>rtho<strong>L</strong>inear<strong>K</strong>ey<strong>B</strong>oards) sells Plancks in ready-to-build kits; for the most part, you can&#x27;t get a Planck preassembled. I got mine on <a href="https://drop.com/buy/planck-mechanical-keyboard">Drop</a> and it arrived in a handful of pieces: a PCB (Printed Circuit Board), a single steel plate with holes where the switches would be mounted, an alumninum case to house the finished product, a humble USB cable and a bag of keycaps.</p>
<h2 id="learn-to-solder"><a class="anchor" href="#learn-to-solder"><span class="icon icon-link"></span></a>Learn to Solder</h2>
<p>I knew I&#x27;d have to solder the switches to the board, something I&#x27;d never done before. (In the past I&#x27;d played around with little hardware projects but was always careful that no soldering was required.) After a bit of research, I picked up:</p>
<ul>
<li>the <a href="https://www.amazon.com/gp/product/B017S00DJ2/ref=ppx_yo_dt_b_asin_title_o07_s00?ie=UTF8&amp;psc=1">&quot;Blink&quot; Learn to Solder Kit</a></li>
<li>a pair of <a href="https://www.amazon.com/gp/product/B00FZPDG1K/ref=ppx_yo_dt_b_asin_title_o06_s00?ie=UTF8&amp;psc=1">micro wire cutters</a></li>
<li>this <a href="https://www.amazon.com/gp/product/B0711LFYJ1/ref=ppx_yo_dt_b_asin_title_o09_s00?ie=UTF8&amp;psc=1">fan</a> to remove solder fumes</li>
<li>a now-discontinued $17 soldering iron kit that came with an iron, some solder, and a carrying case</li>
</ul>
<p>I found the learn to solder kit to be very approachable: it comes with a single small PCB, 3x LEDs, 3x resistors, 3x push button switches and a 3V coin battery and battery holder. I watched a few YouTube videos of people soldering and came across the great <a href="https://learn.adafruit.com/adafruit-guide-excellent-soldering/common-problems">Adafruit Guide to Excellent Soldering</a> before I gave it a shot. In about ten minutes, I had turned a pile of loose parts into a tidy row of buttons hooked up to a battery that could summon light from LEDs. ü§Ø</p>
<p>My first attempt at soldering was passable! I did have one joint I needed to fiddle with, but more importantly, I was becoming comfortable wielding an iron without having to think about a &quot;real&quot; project.</p>
<p>I was ready to try my luck with the Planck PCB. Something I didn&#x27;t fully appreciate at the time is that it comes with all the components that <em>aren&#x27;t</em> switches <strong>already soldered</strong>: resistors, diodes and a microcontroller. And like most boards compatible with Cherry MX-style switches, the Planck&#x27;s switches are <strong>plate mounted</strong>, meaning the switch first snaps onto a metal or plastic plate to position it securely before its pins are soldered to the PCB below.</p>
<img alt="Planck build in progress, with switches mounted to the plate and soldered to the PCB. As this was my first build, I didn&#x27;t take nearly close enough shots to capture the details, but in this case it&#x27;s for the best :)" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-pins.5a828530.jpg&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-pins.5a828530.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-pins.5a828530.jpg&amp;w=3840&amp;q=75" width="1179" height="785" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="grid-or-mit"><a class="anchor" href="#grid-or-mit"><span class="icon icon-link"></span></a>Grid or MIT?</h2>
<p>There are two main layouts for the Planck: <strong>grid</strong>, consisting of 48 keys (4x12), and <strong>MIT</strong>, consisting of 47 keys (a similar grid, except a single switch is used for the spacebar in the bottom row with an optional stabilizer bar). As I&#x27;d read online, the best strategy for soldering plate mounted switches is to pop in the four corner switches, solder those, and then proceed to solder the rest of the board.</p>
<p>I went with the MIT layout, so I had 47 x 2 pins per switch = <strong>94 pins to solder</strong> (!). This sounded like a lot, but once I got into a flow state (pun regrettably intended), I blinked and was suddenly done.</p>
<img alt="Planck keyboard, Cherry MX Blue switches soldered and the top plate sitting in the case. No keycaps yet" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-switches.d6d4b253.jpg&amp;w=3840&amp;q=75 1x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-switches.d6d4b253.jpg&amp;w=3840&amp;q=75" width="2949" height="1966" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>All that was left was the task of re-learning how to type! I underestimated how steep the learning curve would be: the default layout is intuitive once you&#x27;re used to it, but to compensate for the fact of so few <em>physical</em> keys, the Planck has three layers of &quot;keys&quot; in software embedded on the board, also known as <strong>firmware</strong>. There are &quot;raise&quot; and &quot;lower&quot; keys on either side of the spacebar that allow you to access these layers, mostly consisting of special characters and numbers, via key combinations.</p>
<p>I also came across several mentions of <strong>flashing</strong> the board, or loading new firmware instructions (&quot;flashing&quot; for &quot;flash memory&quot;), but I was able to bypass what is usually the final step of a keyboard build in this case as the Planck comes pre-flashed with a <a href="https://qmk.fm/keyboards/planck/">well-designed standard layout</a>.</p>
<img alt="My second keyboard, a Planck OLKB, with beige XDA PBT blank keycaps which have a uniform profile" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-rainbow-caps.50804e1e.jpg&amp;w=3840&amp;q=75 1x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Folkb-rainbow-caps.50804e1e.jpg&amp;w=3840&amp;q=75" width="2160" height="1440" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>After around a year and a half of daily use, I can confirm Plancks are great everyday keyboards. I&#x27;m able to switch between staggered and ortholinear layouts with brief periods of slower than normal typing speeds, and since only switch soldering is required, Plancks are also a great introductory soldering project.</p>
<p>After I finished the Planck, my iron began collecting dust... until I discovered <em>split</em> boards. In my next post, I&#x27;ll describe a slightly more involved build: a Levinson split ortholinear board with, as you might expect, two separate PCBs. To be continued!</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Working at the Edge]]></title>
            <link>localhost:3000/working-at-the-edge</link>
            <guid>localhost:3000/working-at-the-edge</guid>
            <pubDate>Mon, 18 Feb 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Rust and Other Things]]></description>
            <content:encoded><![CDATA[<p>At the beginning of January, I found out that I&#x27;ll be attending the Recurse Center in April for a one week &quot;mini&quot; batch. I can&#x27;t remember exactly when I first heard about RC, but it was years ago and I&#x27;m convinced it was through Julia Evans&#x27; <a href="https://jvns.ca/">excellent blog</a>.</p>
<p>RC is often referred to as a &quot;writer&#x27;s workshop for programmers.&quot; In practice, it&#x27;s a place where programmers go to explore, create and, above all else, learn. There are very few rules (aside from RC&#x27;s <a href="https://www.recurse.com/social-rules">social rules</a>), but one one of my favourite unofficial rules comes from Mary Rose Cook&#x27;s <a href="https://maryrosecook.com/blog/post/recurse-center-testimonial">testimonial</a>:</p>
<blockquote>
<p>There is one constraint: work at the edge of your programming capabilities. Which is to say: work on something that makes you a better programmer.</p>
</blockquote>
<p>Sounds simple enough! And, actually, RC asks you point blank about what you plan to work on during the application process, so you&#x27;d think I&#x27;d have it all figured out by now...</p>
<hr/>
<p>As someone who feels most at home wielding browser technologies, I initially pitched an <a href="https://explorabl.es/">&quot;explorable explanations&quot;</a> project through which I&#x27;d examine low level DOM APIs. Truthfully, I needed to meet a self-imposed deadline, and the &quot;what you&#x27;ll work on&quot; question was the hardest by a factor of 10. Done is better than perfect, etc.</p>
<p>After I got my acceptance email, I started thinking about what I could really use my RC time for. While all of this was rattling around in my head, I came across an <a href="https://twitter.com/kosamari/status/1088191984718761984">impromptu meetup</a> on Twitter: it was around the corner from my office, and the short lineup included Henry Zhu, Paul Irish and Ashley Williams (!!).</p>
<p>Ashley gave a talk on <code>wasm-bindgen</code> (<a href="https://bit.ly/hello-wasm-bindgen">slides</a>) that really resonated with me: she described Rust as the systems programming language for people without a background in systems programming, and mentioned this deep dive <a href="https://hacks.mozilla.org/2018/01/oxidizing-source-maps-with-rust-and-webassembly/">post</a> on oxidizing the <code>source-map</code> JavaScript library (&quot;oxidizing&quot; being the term of art for rewriting some code in Rust... Rustaceans love their wordplay).</p>
<p>While I&#x27;d heard of Wasm (not web <em>or</em> Assembly!) and Rust, I was missing the larger picture of how they might be leveraged together: rewriting hotpaths from unidiomatic, performance-tuned JS to idiomatic Rust, with <code>wasm-bindgen</code> providing the bindgings for the bridge. Suddenly it was all making much more sense, and just in time for RC :)</p>
<p>I started reading <a href="https://doc.rust-lang.org/stable/book/">The Rust Book</a> on a recent vacation, and it&#x27;s one of the best and most accessible technical books I&#x27;ve come across. I&#x27;m half way through, and while I&#x27;m new to the language, having a JS background makes the possibilities of Rust + Wasm all the more exciting.</p>
<p>In case I was doubting my inclination toward Rust, one of the other soft rules of RC is to <strong>embrace serendipity</strong>: avoid tunnel vision, and pursue what might otherwise be a passing curiosity. So Rust it is.</p>
<p>Over the next few weeks I&#x27;ll be posting some of the programs I&#x27;m writing, as well as my evolving plans for my project. If any of this is of particular interest, you can drop me a line via email or twitter.</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Teach a Girl to Program]]></title>
            <link>localhost:3000/teach-a-girl-to-program</link>
            <guid>localhost:3000/teach-a-girl-to-program</guid>
            <pubDate>Tue, 28 Jun 2016 00:00:00 GMT</pubDate>
            <description><![CDATA[And a Programmer to Teach]]></description>
            <content:encoded><![CDATA[<p>It started with a Slack message. A colleague of mine, Christine, had heard about an organization called <a href="https://technovationchallenge.org/">Technovation</a>. Based in San Francisco and with 10 to 18-year-old participants in dozens of countries, Technovation is a competition in which young women build a startup and a mobile app over the course of several months with the guidance of female technologists. This year, the Montreal organizers were seeking companies in the local startup community to mentor teams. Would we be willing to take on a team at Breather?</p>
<img alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fslack.989fcdd6.jpg&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fslack.989fcdd6.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fslack.989fcdd6.jpg&amp;w=3840&amp;q=75" width="1198" height="738" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>True to startup form, we arrived at a decision quickly. I pinged Christine to let her know I‚Äôd love to help: I had mentored at a few <a href="https://www.canadalearningcode.ca/">Canada Learning Code</a> workshops and was excited at the prospect of coaching a team of young women. Ever the daughter of a high school teacher and a programmer by day, I thought it would be challenging but fun in the way a really good Sudoku puzzle is.</p>
<h2 id="kickoff-day-0"><a class="anchor" href="#kickoff-day-0"><span class="icon icon-link"></span></a>Kickoff: Day 0</h2>
<p>On October 24 and 25, 2015, a few dozen young women gathered at Montreal‚Äôs La Gare for Technovation‚Äôs kickoff hackathon. The students were given a primer on the program‚Äôs curriculum, then students and mentors were matched up in the afternoon when the work began in earnest. Christine and I were paired up with five 16-year-olds from an all-girls school in Montreal‚Äôs Outremont neighbourhood.</p>
<p>The students had to choose a problem domain right away--they could change it later on--but our team quickly decided on building a tool to aid in the process of <strong>finding internships or jobs for teenagers</strong>, a time when they‚Äôre beginning to make important decisions about pursuing a career they may or may not have already identified. As part of secondaire 4 and 5 (grades 11 and 12), students at their high school were beginning to search for part-time positions. The whole process left something to be desired: most students found placements through their parents‚Äô professional networks which limited the kinds of careers they were exposed to.</p>
<img alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fhackathon.9554d0b7.jpg&amp;w=1200&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fhackathon.9554d0b7.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fhackathon.9554d0b7.jpg&amp;w=3840&amp;q=75" width="1188" height="792" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>One of the first exercises our team completed came from Google‚Äôs design sprint methodology: the students were tasked with quickly and independently sketching the six primary screens of their app-to-be. When the timer buzzed, everyone glanced around at each other‚Äôs pages. To their amazement, they had all drawn more or less the same screens: a <strong>search view</strong> with a list of results, a <strong>map with pins</strong> for local establishments that are hiring, a <strong>user profile page</strong>, and so on. This came as a pleasant surprise, if not a relief; for a brief moment, their problem seemed to have a straightforward solution. Think Instagram for jobs.</p>
<p>Our students could identify the problem because they observed its effects every day‚Äîa stunning 74% of 100 classmates answered ‚ÄúYes‚Äù to the question ‚ÄúIs it stressful to think about your future career?‚Äù‚Äîbut Christine and I could see the challenges in a software solution based on our own experiences navigating career paths.</p>
<p>Finding the job you‚Äôre best suited for is a kind of chicken and egg problem: a young person is more likely to express interest in careers that fit the set of skills/strengths she‚Äôs developed, but she‚Äôs likely cultivated those skills with a short list of potential careers in mind. Sixteen year old me would be shocked that I wound up a developer mostly because I didn‚Äôt have a clue what being a developer entailed.</p>
<h2 id="what-does-being-a-developer-entail"><a class="anchor" href="#what-does-being-a-developer-entail"><span class="icon icon-link"></span></a>What <em>Does</em> Being a Developer Entail?</h2>
<p>For a long time, I thought of programming as a job that is in many ways the exact inverse of teaching. The marginal cost of a piece of software, the cost of every additional copy, approaches zero, so software products can grow to an almost inconceivable scale relatively quickly. With over 1 billion users, Facebook‚Äôs continued growth is largely constrained by the number of humans on earth with access to the internet (hence Facebook‚Äôs <a href="https://www.theguardian.com/technology/2015/jul/31/facebook-finishes-aquila-solar-powered-internet-drone-with-span-of-a-boeing-737">internet-beaming drones</a>). Software‚Äôs reach is broad, but thin and ephemeral, I thought.</p>
<p>I knew that teaching in its current state didn&#x27;t &quot;scale&quot; in the same way, but I hadn&#x27;t considered that the impact of a talented educator can be as far-reaching as any piece of software.</p>
<p>Take Ms. Mabel Hefty. A fifth grade teacher at Punahou School in Honolulu in the 1970s, Ms. Hefty probably taught several hundred students in her career. One of them happened to be a young person named Barack Obama, who says she was the first person who taught him that he had something to say. Of course, President Obama had other great teachers and mentors throughout his life, though he often cites Ms. Hefty as his favorite. But the more I considered the potential impact of a great educator, the more I thought: if Internet scale is a proxy for impact, Ms. Hefty‚Äôs might rival Facebook‚Äôs.</p>
<p>Tech companies often talk about nurturing relationships with ‚Äúusers‚Äù, but the word itself is revealing. If I deploy a bug to production, I never have to watch a user‚Äôs face twist in frustration as they struggle to accomplish a simple task. But when I occasionally mangled the explanation of some technical concept and reflexively asked our students ‚ÄúDoes that make sense?‚Äù, I had to look on in mild horror as five young people turned my poorly-chosen words over in their heads, vaguely pained and confused.</p>
<p>Teaching is not Sudoku. It‚Äôs more like stand-up comedy with higher stakes, where your performance is evaluated every 30 seconds and your score conveyed via the facial expressions of smart young people you want nothing more than to help succeed as much as you possibly can.</p>
<img alt="" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgoats.36750b61.jpg&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgoats.36750b61.jpg&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fgoats.36750b61.jpg&amp;w=3840&amp;q=75" width="1074" height="1560" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="teaching-a-programmer-to-teach"><a class="anchor" href="#teaching-a-programmer-to-teach"><span class="icon icon-link"></span></a>Teaching a Programmer to Teach</h2>
<p>I knew one thing I&#x27;d learned from my dad, a high school English teacher of over thirty years. To him, it&#x27;s one of the golden rules of teaching and the theme of an <a href="https://www.ted.com/talks/rita_pierson_every_kid_needs_a_champion?language=en#t-450445">excellent TED talk by educator Rita Pierson</a>: <strong>&quot;students don&#x27;t learn from people they don&#x27;t like.&quot;</strong> Beyond that, well, I didn‚Äôt study computer science <em>or</em> education. I studied philosophy, but early on in the mentoring process I knew with a weirdly visceral certainty that I was the perfect person to be giving five 16-year-olds a crash course in JavaScript‚Äôs primitive data types.</p>
<p>The night before our first lesson on git, I spent hours crafting slides that answered all of the questions I was too self-conscious to ask in my earliest programming days. Is there a difference between git and GitHub? How do you combine branches once you‚Äôre done building a feature? And what exactly is a branch?</p>
<img alt="Git basics, distilled into a deck" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fintrotogit.286166e8.jpg&amp;w=3840&amp;q=75 1x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fintrotogit.286166e8.jpg&amp;w=3840&amp;q=75" width="2538" height="1510" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<p>Armed with my <a href="https://github.com/alessbell/git_prez/blob/master/git.pdf">deck</a>, a carefully prepared exercise set up in its own <a href="https://github.com/futurenowteam/collaborative_writing">repository</a> and an irrational confidence in my ability to convey the particulars of a complex decade-old version control system in under two hours, I was as prepared as I‚Äôd ever be.</p>
<p>Once the lesson was underway, and much to my relief, they dug into the material without hesitation. I knew the most important thing was to remove any fear of asking the wrong question, trying the wrong approach, committing the wrong code. Learning in an environment where you feel completely comfortable making mistakes is important for reasons beyond the happiness and well-being of students. It also creates the shortest possible feedback loop, allowing you to adjust and improve with every successive attempt.</p>
<p>In retrospect, the <em>how</em> of Technovation, the way we learned and worked as a team, was probably as critical as the content of the curriculum. Learning and building through iterative processes allows for faster progress.</p>
<img alt="One of many weekend work sessions at Breather HQ" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbreatherOffice.f456a98d.jpg&amp;w=3840&amp;q=75 1x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2FbreatherOffice.f456a98d.jpg&amp;w=3840&amp;q=75" width="2117" height="1056" decoding="async" data-nimg="1" loading="lazy" style="color:transparent"/>
<h2 id="survey-test-interview-repeat"><a class="anchor" href="#survey-test-interview-repeat"><span class="icon icon-link"></span></a>Survey, Test, Interview, Repeat</h2>
<p>And it wasn‚Äôt just in the programming portion that we embraced this approach. In order to test certain assumptions the team was making about how best to solve their problem, Christine had the idea of having them implement a ‚Äúconcierge‚Äù version of their idea before writing a line of code. Our team went through the motions of manually helping a few classmates land internships and realized it was actually way less straightforward than they‚Äôd imagined. Even when they were able to make warm introductions to professionals in fields their classmates were interested in, students were daunted at the prospect of reaching out to a professional they didn‚Äôt know.</p>
<p>A large portion of the six months of Techovation were spent this way: survey, test, interview, repeat. After testing our ideas, we realized the importance of two things: 1) that students have the opportunity to interact with professionals of diverse backgrounds, and 2) that students feel comfortable communicating on the platform.</p>
<p>The solution our team arrived at was a digital network in which a high school student has access to school alumni who are organized by industry and students are prompted with helpful conversation starters when they‚Äôd like to ask a question of one. Under the hood, it‚Äôs a responsive web app built with Meteor (here‚Äôs the <a href="https://github.com/futurenowteam/futurenow.com">source code</a>).</p>
<p>This was maybe the most exciting takeaway of Technovation: as programming becomes a tool more and more people use to create, the kinds of software being made will naturally diversify. As our team learned, some of the hardest problems in software are in understanding the needs and aspirations of those you hope to serve.</p>
<h2 id="postscript"><a class="anchor" href="#postscript"><span class="icon icon-link"></span></a>Postscript</h2>
<p>Most people I spoke with about Technovation over the past nine months assumed its goal is to encourage more young women to pursue careers in technology and entrepreneurship. Our team was interviewed by reporters several times‚Äî<a href="http://ici.radio-canada.ca/emissions/la_sphere/2015-2016/chronique.asp?idChronique=406096">once by Radio-Canada</a>, for example‚Äîand the question of career path was a common one. Did they now suddenly have dreams of going into tech? Each time our students politely answered, ‚ÄúWell‚Ä¶ maybe!‚Äù They‚Äôre interested in all kinds of things, from medicine to law to the arts. It‚Äôs hard to say when you‚Äôre 16.</p>
<p>The more often adults asked the career question, though, the more I realized it‚Äôs beside the point. As much as I know that increasing the proportion of marginalized and underrepresented folks in tech is intrinsically valuable and important, I don‚Äôt actually have any vested interest in these five smart young women becoming programmers or entrepreneurs. What I do have a vested interest in is that they feel empowered to solve problems they deem interesting and worthy of their time, because that is in all of our interests.</p>
<p>In that way, Technovation isn‚Äôt really about technology or innovation at all: it‚Äôs about teaching young people (and reminding adults) of the importance of setting your sights on a wildly ambitious objective, even, or maybe especially, when the path to achieving it is unclear. You might not know how you‚Äôre going to get there, but you are sure you‚Äôre going to figure it out.</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[From Bitmaker to Breather]]></title>
            <link>localhost:3000/from-bitmaker-to-breather</link>
            <guid>localhost:3000/from-bitmaker-to-breather</guid>
            <pubDate>Wed, 04 Mar 2015 00:00:00 GMT</pubDate>
            <description><![CDATA[A QuickStart‚Ñ¢ Guide to Making Things on the Internet]]></description>
            <content:encoded><![CDATA[<p>It was a little more than a year ago that I made what was, in retrospect, a rather large, life-altering decision: I signed up for the coding bootcamp Bitmaker Labs. Despite my best efforts to document the process, I only ended up writing a total of three blog posts during my time as a student, but I remember how useful the blogs of past cohorts were in helping me decide that Bitmaker was the educational environment I was looking for. After the program, however, many student blogs go dark: surprisingly, life after Bitmaker can be even more hectic than life at 220 King St. West.</p>
<p>This is my attempt to remedy the situation, having recently joined the wonderful team at <a href="https://breather.com">Breather</a> as a developer. This post is a brief reflection on my time at Bitmaker and what made it the right choice for me, a previously self-taught freelance designer/developer.</p>
<h2 id="bootcamp-or-self-study"><a class="anchor" href="#bootcamp-or-self-study"><span class="icon icon-link"></span></a>Bootcamp or Self-Study?</h2>
<p>My answer is secret option C: both.</p>
<p>Throughout my undergraduate degree in philosophy and political science I found myself taking on freelance web design/dev jobs out of sheer enjoyment. The Jessica Hische-ism ‚Äúprocrastiwork‚Äù always felt apt: making things on the internet was the work I did when I should have been doing other work. First for my dad&#x27;s small business and later for freelance clients or politicians I was working for, I would mostly build WordPress sites with themes I could hack in a fairly limited way, or use a no-code site builder like Apple&#x27;s old <a href="https://en.wikipedia.org/wiki/IWeb">iWeb</a> (RIP).</p>
<p>In my final year of university, I got bored of making static pages and copying inscrutable JavaScript plugin code into WordPress, so I signed up for One Month Rails and started learning Ruby at night. This turned out to be a lot more fun but also more difficult than expected: I‚Äôd start making meaningful progress only to have my busy school schedule take over.</p>
<p>Weeks later, I‚Äôd come back to programming, resigned to repeating lessons I‚Äôd already completed and managed to forget. Bitmaker was, for me, the answer to a persistent question: how can I build more interactive and complex things on the web? Many successful developers are self-taught, and this is surely a legitimate path to follow, but for me a bootcamp gave me the time and space to focus on one objective after years of ad hoc self-learning and build a portfolio.</p>
<p>A passion for programming is something I saw in all my classmates, and I think it‚Äôs the closest thing to a prerequisite for courses like Bitmaker‚Äôs. In the past few years, bootcamps have come to constitute a new category in education, and self-initiated learning is at their core. Your instructors are there to help you, not to convince you to work or reprimand you for skipping your homework three nights in a row. When prospective students ask me for advice, my main suggestion is to make sure they&#x27;ve tried building some simple web pages before sending in an application; it&#x27;s a low bar, but if you don‚Äôt enjoy this much, you surely won‚Äôt enjoy doing it for ten hours a day, nine weeks in a row.</p>
<p>As for more granular tips on learning to program, I defer to the <a href="https://christinacacioppo.com/blog/build-products">definitive post on the topic</a> by Christina Cacioppo. It was written after I finished Bitmaker, but there isn‚Äôt a single observation out of place.</p>
<h2 id="bootcamp-prep"><a class="anchor" href="#bootcamp-prep"><span class="icon icon-link"></span></a>Bootcamp Prep</h2>
<p>I can share more specific advice on what is and isn‚Äôt important while gearing up for the course, however. When I first started making my way through the prep material in May 2014, I found myself gravitating toward blog posts about spaced repetition memorization and other memory hacks. ‚ÄúFlash cards!‚Äù I‚Äôd think to myself wistfully, ‚Äúat last, the answer to my problems...‚Äù Flash cards can be useful in retaining new material, and there are lots of great free tools like <a href="https://apps.ankiweb.net/">Anki</a> if you‚Äôre interested. In retrospect, though, my search for a single unifying approach to learning Ruby was flawed.</p>
<p>When I think about the time I spent exploring different study strategies, one of Ben Horowitz‚Äôs famous lessons from his Netscape years comes to mind: <a href="https://a16z.com/2011/11/13/lead-bullets/">there is no silver bullet, only a lot of lead bullets</a>. Learning to build things you‚Äôve never built before is mostly a function of persistence. It‚Äôs easy to feel discouraged--I certainly did!--but if you don‚Äôt fully grasp a concept today, trust that you‚Äôll get it tomorrow, or the day after that. One day, as it tends to go, you‚Äôll be right. As Christina Cacioppo puts it rather bluntly, ‚ÄúLearning to program requires tenacity, not brilliance. Most professional programming isn‚Äôt rocket science, metaphorically or actually.‚Äù</p>
<p>It‚Äôs not rocket science, but that doesn‚Äôt mean it‚Äôs not difficult (and it definitely doesn‚Äôt mean you won‚Äôt struggle). As a student who was used to feeling self-assured in classroom settings studying the humanities and often felt out of my depth at Bitmaker, this is far and away the most valuable lesson I learned: working hard and persisting is its own reward, not simply because trying and failing &quot;builds character&quot; in some abstract sense, but because it‚Äôs fundamentally how human cognition works.</p>
<p>As The Khan Academy founder Salman Khan writes in his excellent blog post <a href="https://www.khanacademy.org/talks-and-interviews/conversations-with-sal/a/the-learning-myth-why-ill-never-tell-my-son-hes-smart">‚ÄúThe Learning Myth: Why I‚Äôll Never Tell My Son He‚Äôs Smart‚Äù</a>:</p>
<blockquote>
<p>Researchers have known for some time that the brain is like a muscle; that the more you use it, the more it grows. They‚Äôve found that neural connections form and deepen most when we make mistakes doing difficult tasks rather than repeatedly having success with easy ones. What this means is that our intelligence is not fixed, and the best way that we can grow our intelligence is to embrace tasks where we might struggle and fail.</p>
</blockquote>
<h2 id="its-ok-good-to-fail"><a class="anchor" href="#its-ok-good-to-fail"><span class="icon icon-link"></span></a>It&#x27;s <del>OK</del> Good to Fail</h2>
<p>At Bitmaker Labs, perhaps more than anything else, you will struggle and fail. That‚Äôs what makes it such a fantastic place to learn. While attempting to build Rails apps on my own, I‚Äôd make moderate progress, hit a stumbling block I couldn‚Äôt overcome, get discouraged and walk away from the computer. Instead, at Bitmaker, after ten or fifteen minutes of struggling on my own--generally the point after which spinning your wheels becomes significantly less productive--I was able to find an instructor to give me the boost I needed to keep going.</p>
<p>As I came to discover, the core feature of a bootcamp is that it accelerates this feedback loop to enable you to fail faster, more often and in the most constructive environment possible. This is terrible for your ego but exceptionally effective where it counts: learning new and difficult things.</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
        <item>
            <title><![CDATA[Coding != Computer Science]]></title>
            <link>localhost:3000/coding-is-not-cs</link>
            <guid>localhost:3000/coding-is-not-cs</guid>
            <pubDate>Mon, 07 Jul 2014 00:00:00 GMT</pubDate>
            <description><![CDATA[The Case for Programming as a Liberal Art]]></description>
            <content:encoded><![CDATA[<p>Listening to David Heinemeier Hansson deliver the <a href="https://www.youtube.com/watch?v=9LfmrkyP81M">2014 RailsConf keynote</a> a little over two months ago was, for me, a minor revelation. It was exam season in my last semester of university and I had several philosophy finals bearing down on me. As I began organizing my notes, I came across a link on Twitter and fired up the conference livestream. What began as white noise in the background quickly piqued my interest. Soon enough, I found myself glued to the screen.</p>
<p>Growing up in Copenhagen, DHH loved tinkering with computers and tried to learn programming on three separate occasions. In retrospect, he says, his early, uninspiring attempts at writing software had one important thing in common: each time he had tried and failed, Hansson had encountered programming in the context of computer science. As a teenage gamer and aspiring video game developer, some of his first attempts at programming were in the esoteric language <a href="https://en.wikipedia.org/wiki/AMOS_(programming_language)">AMOS Basic</a>. There was plenty of math involved and Hansson has the report cards to prove his lack of mathematical aptitude: he was an F student in math and physics, but an A student in English.</p>
<p>Years passed. Closer to the age of 20, Hansson finally learned to program. Just three years later, he invented Ruby on Rails, the open source web application framework I‚Äôm learning here at Bitmaker Labs nearly a decade down the line. If your understanding of programming is based largely on the way it‚Äôs depicted in popular culture, you may be wondering: how could that possibly be?</p>
<p>Stories like Hansson‚Äôs are inconvenient exceptions to many of the storied myths of programming. From the outside looking in, many believe that what all software engineers do is some strain of computer science. Worse still, many programmers wish it were so (Hansson calls this hitting them in their ‚Äúimpostor plexus‚Äù). In reality, Hansson says, writing software is less like engineering and more like studying 17th century French poetry: when reading other people‚Äôs programs, most of his time is spent wondering ‚Äúwhat the f‚Äîk did this person mean?‚Äù</p>
<p>Point taken, and now that I‚Äôve waded through other people‚Äôs code, I can attest to this. The analogy elicits a few chuckles from the audience, but it also succeeds in getting the message across. In DHH‚Äôs view, writing software boils down to precisely that: <em>writing</em>. He uses this notion of computer science as a liberal art--a kind of cognitive re-framing of the discipline <a href="https://www.youtube.com/watch?v=IY7EsTnUSxY">popularized by Steve Jobs</a>--to further argue that, while there will always be a place for unit testing and optimization, prioritizing metrics ahead of system architecture is fundamentally wrongheaded because it sacrifices sound system design &quot;on the altar of objective science.&quot;</p>
<p>As a web developer-in-training, I prefer to view the issue of testing and TDD with a bit more nuance (<a href="https://web.archive.org/web/20190420075019/https://www.destroyallsoftware.com/blog/2014/tdd-straw-men-and-rhetoric">this is a great piece</a> if you‚Äôre interested in the other side of the story), but hearing DHH challenge the computer science paradigm was a much-needed reminder that, despite a lack of formal computer science education, programming is still very much ‚Äúfor me.‚Äù This may seem like a trite realization, but as someone who loved studying the humanities in university while maintaining a strong interest in software, it was a relief to hear that the two aren‚Äôt mutually exclusive. In fact, they might be more closely related than you think.</p>]]></content:encoded>
            <author>web@bellisar.io (Alessia Bellisario)</author>
        </item>
    </channel>
</rss>